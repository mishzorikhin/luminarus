#include <FastLED.h>

#define NUM_LEDS 220
#define DATA_PIN D2

CRGB leds[NUM_LEDS];

#define COOLING  55
#define SPARKING 120
#define NORTHERN_LIGHTS_HUE_MIN 120
#define NORTHERN_LIGHTS_HUE_MAX 160

CRGBPalette16 currentPalette;

void setup() {
  FastLED.addLeds<WS2812B, DATA_PIN, GRB>(leds, NUM_LEDS);
  currentPalette = OceanColors_p; // Палитра с оттенками синего
}

void loop() {
  northernLights();
}

void northernLights() {
  static byte heat[NUM_LEDS];

  // Каждый цикл затухания и искрения
  for (int i = 0; i < NUM_LEDS; i++) {
    heat[i] = qsub8(heat[i], random8(0, ((COOLING * 10) / NUM_LEDS) + 2));
  }

  // Распределение тепла от светодиода к светодиоду
  for (int k = NUM_LEDS - 1; k >= 2; k--) {
    heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
  }

  // Случайное появление искр
  if (random8() < SPARKING) {
    int y = random8(7);
    heat[y] = qadd8(heat[y], random8(160, 255));
  }

  // Применение цвета на основе тепла к светодиодам с использованием плавного перехода цветов из текущей палитры
  for (int j = 0; j < NUM_LEDS; j++) {
    byte colorIndex = scale8(heat[j], 240);
    leds[j] = ColorFromPalette(currentPalette, NORTHERN_LIGHTS_HUE_MIN + colorIndex);
  }

  FastLED.show();
  delay(100); // Увеличьте это значение, чтобы замедлить эффект
}
