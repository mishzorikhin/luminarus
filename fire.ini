#include <FastLED.h>

#define NUM_LEDS 170 // Общее количество светодиодов (85 на каждую сторону)
#define DATA_PIN D2

CRGB leds[NUM_LEDS];

// Массив порядка светодиодов для каждой стороны ленты
int ledOrder1[NUM_LEDS / 2];
int ledOrder2[NUM_LEDS / 2];

#define FIRE_COOLING  65  // Управляет температурой затухания огня (чем выше значение, тем медленнее затухание)
#define SPARKING 180     // Управляет интенсивностью появления искр (чем выше значение, тем чаще искры)

void setup() {
  FastLED.addLeds<WS2812B, DATA_PIN, GRB>(leds, NUM_LEDS);

  // Инициализация массивов порядка светодиодов
  for (int i = 0; i < NUM_LEDS / 2; i++) {
    ledOrder1[i] = i;
    ledOrder2[i] = (NUM_LEDS / 2 - 1) - i;
  }
}

void loop() {
  fireEffect(leds, ledOrder1, NUM_LEDS / 2);
  fireEffect(leds + NUM_LEDS / 2, ledOrder2, NUM_LEDS / 2);
}

void fireEffect(CRGB leds[], int ledOrder[], int numLeds) {
  static byte heat[NUM_LEDS / 2];

  for (int i = 0; i < numLeds; i++) {
    heat[i] = qsub8(heat[i], random8(0, ((FIRE_COOLING * 10) / numLeds) + 2));
  }

  for (int k = numLeds - 1; k >= 2; k--) {
    heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
  }

  if (random8() < SPARKING) {
    int y = random8(7);
    heat[y] = qadd8(heat[y], random8(160, 255));
  }

  // Отображение цветов на светодиодах в порядке, указанном в массиве
  for (int j = 0; j < numLeds; j++) {
    CRGB color = HeatColor(heat[ledOrder[j]]);
    leds[j] = color;
  }

  FastLED.show();
  delay(100);
}
